<?php

/**
 * @file
 * Disable modules
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme().
 */
function disable_modules_theme() {
  return array(
    'disable_modules' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Prepares variables for module disable templates.
 *
 * Default template: disable-modules.html.twig.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form. Child elements of the form
 *     are individual modules. Each module is an associative array containing
 *     the following elements:
 *     - #module_name: The name of the module as a string.
 *     - name: The name of the module in a renderable array.
 *     - description: A description of the module.
 *     - #required_by: (optional) A list of modules that require the module.
 *     - #validation_reasons: (optional) Additional reasons why the module
 *       cannot be uninstalled.
 *     - #attributes: A list of attributes for the module wrapper.
 *
 * @ingroup themeable
 */
function template_preprocess_disable_modules(&$variables) {
  $form = $variables['form'];
  $variables['modules'] = [];

  // Iterate through all the modules, which are children of this element.
  foreach (Element::children($form['modules']) as $key) {
    $module = $form['modules'][$key];
    $module['module_name'] = $module['#module_name'];
    $module['checkbox'] = $form['uninstall'][$key];
    $module['checkbox_id'] = $form['uninstall'][$key]['#id'];

    if (!empty($module['#validation_reasons'])) {
      $module['validation_reasons'] = $module['#validation_reasons'];
      $module['reasons_count'] = count($module['validation_reasons']);
    }
    else {
      $module['reasons_count'] = 0;
    }
    if (!empty($module['#required_by'])) {
      $module['required_by'] = $module['#required_by'];
      $module['reasons_count'] = $module['reasons_count'] + 1;
    }
    $module['attributes'] = new Attribute($module['#attributes']);
    $variables['modules'][] = $module;
  }
}

/**
 * Get modules then can be disabled.
 *
 * @param array $modules
 *   A list of modules.
 *
 * @return array $disable_list
 *   The list of modules that can be disabled.
 */
function disable_modules_get_list($modules) {
  $disabled_modules = disable_modules_get_disabled_modules();
  $disable_list = array_filter($modules, function ($module) use ($modules, $disabled_modules) {
    if (empty($modules[$module->getName()]->info['required']) && drupal_get_installed_schema_version($module->getName()) > SCHEMA_UNINSTALLED) {
      return TRUE;
    }
    elseif (in_array($module->getName(), $disabled_modules)) {
      return TRUE;
    }
  });

  // No point in disabling this module.
  unset($disable_list['disable_modules']);

  return $disable_list;
}

/**
 * Get a list of currently disabled modules.
 */
function disable_modules_get_disabled_modules() {
  $disabled_modules = \Drupal::config('disable_modules.disabled')->get('disable');
  if (!is_array($disabled_modules)) {
    $disabled_modules = array();
  }
  return $disabled_modules;
}

/**
 * Main entry point to enable or disable modules.
 *
 * @param $modules
 *   A list of modules.
 */
function disable_modules_do($modules) {

  $schema = \Drupal::config('disable_modules.disabled')->get('schema');
  if (!is_array($schema)) {
    $schema = array();
  }
  $config_disabled = \Drupal::config('disable_modules.disabled')->get('disable');
  if (!is_array($config_disabled)) {
    $config_disabled = array();
  }

  $disable = array_keys(array_filter($modules));
  $enable = array_diff($config_disabled, $disable);
  $disable = array_diff($disable, $config_disabled);

  foreach ($disable as $module) {
    $config_disabled[] = $module;
    $schema[$module] = drupal_get_installed_schema_version($module);
  }

  foreach ($enable as $module) {
    if (in_array($module, $config_disabled)) {
      unset($config_disabled[array_search($module, $config_disabled)]);
      unset($schema[$module]);
    }
  }

  // Set a global variable - hurray - so we know in the module installer
  // this is a valid request.
  $GLOBALS['drush_disable_modules'] = TRUE;

  if (!empty($enable)) {
    \Drupal::service('module_installer')->install($enable);
  }

  if (!empty($disable)) {
    \Drupal::service('module_installer')->uninstall($disable);
  }

  \Drupal::configFactory()->getEditable('disable_modules.disabled')
    ->set('disable', $config_disabled)
    ->set('schema', $schema)
    ->save();

  drupal_flush_all_caches();
}
